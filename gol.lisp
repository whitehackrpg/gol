(defun dagame (old)
  (blt:clear)
  (let ((new (make-hash-table)))
    (loop for k being the hash-keys in old using (hash-value v) do
      (let ((c (reduce #'+ (mapcar #'(lambda (n) (- 1 (gethash (+ k n) old 1)))
				   '(#C( 0 -1) #C(0  1) #C(-1 0) #C(1 0)
				     #C(-1 -1) #C(1 -1) #C(-1 1) #C(1 1))))))
	(setf (blt:cell-char (realpart k) (imagpart k)) (code-char (+ v 31))
	      (gethash k new) (if (member (complex c v) '(2 3 #C(3 1))) 0 1)))
	  finally (blt:refresh))
    (unless (blt:has-input-p) 
      (dagame new))))

(defun game-of-life (seed dimx dimy &optional (hash (make-hash-table)))
  (blt:with-terminal 
    (blt:set "window.size = ~AX~A" dimx dimy)
    (dagame (dotimes (x dimx hash)
	      (dotimes (y dimy)
		(let ((coord (complex x y)))
		  (setf (gethash coord hash)
			(if (member coord seed) 0 1))))))))
